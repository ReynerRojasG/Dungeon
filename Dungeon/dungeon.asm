.MODEL SMALL
.STACK 1024

SCR_W EQU 640
SCR_H EQU 350
IMG_W EQU 480
IMG_H EQU 336
LEFT_MARGIN EQU (SCR_W-VIEW_W)/2
TOP_MARGIN EQU (SCR_H-VIEW_H)/2
BUF_SIZE EQU 4096

VIEW_W EQU 160
VIEW_H EQU 100

.DATA
FILE_NAME DB 'mapRD.txt', 0
FILE_HANDLE DW 0

BUFFER DB BUF_SIZE DUP(?)
BYTES_IN_BUFFER DW 0
BUF_INDEX DW 0
END_FLAG DB 0

XCUR DW 0
YCUR DW 0

VIEW_X DW 100 ; Define el inicio del viewport
VIEW_Y DW 0  ; Define el inicio del viewport

MSG_OPEN_ERR DB 'ERROR ABRIENDO EL ARCHIVO$', 0
MSG_READ_ERR DB 'ERROR LEYENDO EL ARCHIVO$', 0

.CODE
MAIN PROC
    MOV AX, @DATA
    MOV DS, AX

    CALL SET_VIDEO_MODE
    CALL OPEN_FILE
    JC OPEN_FAIL
    MOV FILE_HANDLE, AX

    CALL INIT_CURSOR
    MOV END_FLAG, 0

REDRAW:
    CALL READ_CHUNK
    CMP BYTES_IN_BUFFER, 0
    JE READ_DONE

    CALL PARSE_AND_DRAW
    CMP END_FLAG, 1
    JE READ_DONE

    CALL HANDLE_INPUT
    JMP REDRAW

READ_DONE:
    CALL WAIT_KEY
    MOV BX, FILE_HANDLE
    CALL CLOSE_FILE
    JMP EXIT_OK

OPEN_FAIL:
    LEA DX, MSG_OPEN_ERR
    CALL PRINT_STR
    CALL WAIT_KEY

EXIT_OK:
    CALL RESTORE_TEXT
    MOV AX, 4C00H
    INT 21H
MAIN ENDP

; ------------------ VIDEO ----------------------
SET_VIDEO_MODE PROC
    MOV AX, 0010H
    INT 10H
    RET
SET_VIDEO_MODE ENDP

RESTORE_TEXT PROC
    MOV AX, 0003H
    INT 10H
    RET
RESTORE_TEXT ENDP

; ------------------ ARCHIVO --------------------
OPEN_FILE PROC
    MOV DX, OFFSET FILE_NAME
    MOV AX, 3D00H
    INT 21H
    RET
OPEN_FILE ENDP

CLOSE_FILE PROC
    MOV AH, 3EH
    INT 21H
    RET
CLOSE_FILE ENDP

READ_CHUNK PROC
    MOV BX, FILE_HANDLE
    MOV DX, OFFSET BUFFER
    MOV CX, BUF_SIZE
    MOV AH, 3FH
    INT 21H
    JC READ_ERR
    MOV BYTES_IN_BUFFER, AX
    MOV BUF_INDEX, 0
    RET
READ_ERR:
    MOV BYTES_IN_BUFFER, 0
    MOV BUF_INDEX, 0
    LEA DX, MSG_READ_ERR
    CALL PRINT_STR
    RET
READ_CHUNK ENDP

; ------------------ CONVERSOR/DIBUJO --------------
PARSE_AND_DRAW PROC
.NEXT_BYTE:
    MOV BX, BUF_INDEX
    CMP BX, BYTES_IN_BUFFER
    JAE .DONE

    MOV SI, BX
    MOV AL, BUFFER[SI]
    INC BX
    MOV BUF_INDEX, BX

    MOV DL, AL
    CALL HEX_TO_NIBBLE
    JNC .IS_PIXEL

    MOV AL, DL
    CMP AL, '@'
    JE .END_OF_LINE
    CMP AL, '$'
    JE .END_OF_FILE
    CMP AL, 13
    JE .NEXT_BYTE
    CMP AL, 10
    JE .NEXT_BYTE
    CMP AL, ' '
    JE .NEXT_BYTE
    JMP .NEXT_BYTE

.IS_PIXEL:
    MOV BX, XCUR
    CMP BX, IMG_W
    JAE .STEP_X
    MOV BX, YCUR
    CMP BX, IMG_H
    JAE .STEP_X
    CALL DRAW_PIXEL
.STEP_X:
    INC XCUR
    JMP .NEXT_BYTE

.END_OF_LINE:
    CALL NEXT_ROW
    JMP .NEXT_BYTE

.END_OF_FILE:
    MOV END_FLAG, 1
.DONE:
    RET
PARSE_AND_DRAW ENDP

HEX_TO_NIBBLE PROC
    CMP AL, '0'
    JB NOT_HEX
    CMP AL, '9'
    JBE DEC_DIGIT
    CMP AL, 'A'
    JB CHK_LOWER
    CMP AL, 'F'
    JBE UP_DIGIT
    JMP CHK_LOWER
DEC_DIGIT:
    SUB AL, '0'
    CLC
    RET
UP_DIGIT:
    SUB AL, 'A'
    ADD AL, 10
    CLC
    RET
CHK_LOWER:
    CMP AL, 'a'
    JB NOT_HEX
    CMP AL, 'f'
    JBE LO_DIGIT
    JMP NOT_HEX
LO_DIGIT:
    SUB AL, 'a'
    ADD AL, 10
    CLC
    RET
NOT_HEX:
    STC
    RET
HEX_TO_NIBBLE ENDP

DRAW_PIXEL PROC
    PUSH BX
    PUSH CX
    PUSH DX

    MOV BX, XCUR
    SUB BX, VIEW_X
    CMP BX, VIEW_W
    JAE .SKIP
    MOV CX, BX

    MOV BX, YCUR
    SUB BX, VIEW_Y
    CMP BX, VIEW_H
    JAE .SKIP
    MOV DX, BX

    ADD CX, LEFT_MARGIN
    ADD DX, TOP_MARGIN

    MOV AH, 0CH
    XOR BH, BH
    INT 10H

.SKIP:
    POP DX
    POP CX
    POP BX
    RET
DRAW_PIXEL ENDP

NEXT_ROW PROC
    INC YCUR
    MOV XCUR, 0
    RET
NEXT_ROW ENDP

INIT_CURSOR PROC
    MOV XCUR, 0
    MOV YCUR, 0
    RET
INIT_CURSOR ENDP

WAIT_KEY PROC
    MOV AH, 00H
    INT 16H
    RET
WAIT_KEY ENDP

PRINT_STR PROC
    MOV AH, 09H
    INT 21H
    RET
PRINT_STR ENDP

HANDLE_INPUT PROC
    MOV AH, 00H
    INT 16H
    CMP AL, 'W'
    JE MOVE_UP
    CMP AL, 'S'
    JE MOVE_DOWN
    CMP AL, 'A'
    JE MOVE_LEFT
    CMP AL, 'D'
    JE MOVE_RIGHT
    RET

MOVE_UP:
    CMP VIEW_Y, 0
    JBE .LIMIT_UP
    DEC VIEW_Y
.LIMIT_UP:
    RET

MOVE_DOWN:
    MOV AX, VIEW_Y
    ADD AX, VIEW_H
    CMP AX, IMG_H
    JAE .LIMIT_DOWN
    INC VIEW_Y
.LIMIT_DOWN:
    RET

MOVE_LEFT:
    CMP VIEW_X, 0
    JBE .LIMIT_LEFT
    DEC VIEW_X
.LIMIT_LEFT:
    RET

MOVE_RIGHT:
    MOV AX, VIEW_X
    ADD AX, VIEW_W
    CMP AX, IMG_W
    JAE .LIMIT_RIGHT
    INC VIEW_X
.LIMIT_RIGHT:
    RET

HANDLE_INPUT ENDP

END MAIN
